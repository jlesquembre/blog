<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Lafuente</title>
<subtitle></subtitle>
<link href="https://lafuente.me/feed/feed.xml" rel="self"/>
<link href="https://www.lafuente.me/"/>
<updated>null</updated>
<id>https://www.lafuente.me/</id>
<author>
<name>José Luis Lafuente</name>
<email>jl@lafuente.me</email>
</author>
<entry>
<title>GnuPG Notes</title>
<link href="https://lafuente.me/posts/gnupg-notes"/>
<updated>2014-04-24T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/gnupg-notes</id>
<content type="html">&lt;h2 id=&quot;create-new-key&quot;&gt;Create new key &lt;a class=&quot;direct-link&quot; href=&quot;#create-new-key&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Create or edit the file &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; and add the following lines to use the cryptographically stronger SHA512 hashing algorithm for signatures in preference to SHA1 algorithm.&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;personal-digest-preferences SHA512&lt;br&gt;cert-digest-algo SHA512&lt;br&gt;default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can generate the keys:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --gen-key&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The system will prompt us to generate some entropy, we can just run this in other terminal. Any expensive operation over the file system, like &lt;code&gt;find&lt;/code&gt; would we also ok.&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -R ~&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default we have one master key (for signing) and one subkey (for encryption)&lt;/p&gt; &lt;h2 id=&quot;list-keys&quot;&gt;List keys &lt;a class=&quot;direct-link&quot; href=&quot;#list-keys&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;We can see our public keys with this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --list-keys&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And our secret keys with this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --list-secret-keys&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To see more information about the keys, we can use this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --edit-key KEYID_or_EMAIL&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is something like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Secret key is available. pub 4096R/AB58430D created: 2014-04-14 expires: never usage: SC trust: ultimate validity: ultimate sub 4096R/D5293C21 created: 2014-04-14 expires: never usage: E [ultimate] (1). John Doe &amp;lt;jonh@gmail.com&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Meaning of the usage field abbreviation:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Constant&lt;/th&gt; &lt;th style=&quot;text-align:center&quot;&gt;Character&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;PUBKEY_USAGE_SIG&lt;/td&gt; &lt;td style=&quot;text-align:center&quot;&gt;S&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;PUBKEY_USAGE_CERT&lt;/td&gt; &lt;td style=&quot;text-align:center&quot;&gt;C&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;PUBKEY_USAGE_ENC&lt;/td&gt; &lt;td style=&quot;text-align:center&quot;&gt;E&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;PUBKEY_USAGE_AUTH&lt;/td&gt; &lt;td style=&quot;text-align:center&quot;&gt;A&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Thus, for example, usage: SCA means that the sub-key can be used for signing, for creating a certificate and authentication purposes.&lt;/p&gt; &lt;p&gt;The primary user id is indicated by a dot, and selected keys or user ids are indicated by an asterisk&lt;/p&gt; &lt;h2 id=&quot;user-id-management&quot;&gt;User id management &lt;a class=&quot;direct-link&quot; href=&quot;#user-id-management&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Use the &lt;code&gt;gpg ‐‐edit-key&lt;/code&gt; command to launch the &lt;code&gt;gpg&amp;gt;&lt;/code&gt; prompt.&lt;/p&gt; &lt;p&gt;Select a uid:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg&amp;gt; uid n &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;n&lt;/code&gt; is the uid number. Use * to select all and 0 to deselect all.&lt;/p&gt; &lt;p&gt;Add a uid:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg&amp;gt; adduid &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Make uid primary, before you need to select a uid:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg&amp;gt; primary &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;create-subkey&quot;&gt;Create subkey &lt;a class=&quot;direct-link&quot; href=&quot;#create-subkey&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;For extra security, it might be appropriate to physically remove the master private key from your computer, and instead use a second generated subkey for signing files. You can sign and encrypt files as normal with your signing subkey and encryption subkey. If those keys ever get compromised, you can simply revoke them and generate new ones with your uncompromised master key.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg --edit-key KEYID_or_EMAIL gpg&amp;gt; addkey . . . gpg&amp;gt; save &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;create-subkey-for-ssh-authentication&quot;&gt;Create subkey for SSH authentication &lt;a class=&quot;direct-link&quot; href=&quot;#create-subkey-for-ssh-authentication&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;You need to create a subkey for authentication. To do this, you need to run gpg in expert mode:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg --expert --edit-key KEYID_or_EMAIL gpg&amp;gt; addkey # Select (11) ECC (set your own capabilities) # Select (1) Curve 25519 # Select successively (S), (E), and (A) to remove the signing and encryption capabilities and enable the authentication capability. gpg&amp;gt; save &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To export your public ssh key:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --export-ssh-key KEYID_or_EMAIL&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To make gnupg use your authentication key for ssh:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --with-keygrip --list-public-keys KEYID_or_EMAIL&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And add the keygrip for the authentication key to &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt;&lt;/p&gt; &lt;h2 id=&quot;export-keys&quot;&gt;Export keys &lt;a class=&quot;direct-link&quot; href=&quot;#export-keys&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --armor --export KEYID_or_EMAIL &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; keyname.public.asc&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;--armor&lt;/code&gt; exports the key in ascii format. Is also posible use &lt;code&gt;--export-secret-key&lt;/code&gt; or &lt;code&gt;--export-secret-subkeys&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;--export&lt;/code&gt; exports your whole public key. It probably doesn&#x27;t make sense to only export a public subkey (public keys are supposed to be public) and various important bits of information are tied to the main key in any case. Your user id, for example, is stored on the main key.&lt;/p&gt; &lt;h2 id=&quot;import-subkeys&quot;&gt;Import subkeys &lt;a class=&quot;direct-link&quot; href=&quot;#import-subkeys&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --import subkey.asc&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is not possible to delete only the secret master key. If you want to delete only the master secret key, you need to follow this steps:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Export secret subkeys&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Delete secret key&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --delete-secret-key KEYID_or_EMAIL&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Import secret subkeys&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can verify it worked by running:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;gpg --list-secret-keys /home/john/.gnupg/secring.gpg ----------------------------- sec# 4096R/AB58430D 2014-04-14 uid John Doe &amp;lt;jonh@gmail.com&amp;gt; ssb 4096R/D5293C21 2014-04-14 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The pound sign &lt;code&gt;#&lt;/code&gt; means the signing subkey is not in the keypair located in the keyring.&lt;/p&gt; &lt;h2 id=&quot;encrypting-a-file&quot;&gt;Encrypting a file &lt;a class=&quot;direct-link&quot; href=&quot;#encrypting-a-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;gpg --recipient MY_KEY --recipient OTHER_KEY --encrypt message.txt&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The encrypted message is written to &lt;code&gt;message.txt.gpg&lt;/code&gt;&lt;/p&gt; &lt;p&gt;I wanted to make sure I could read the message too, for this reason I have two recipents.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References &lt;a class=&quot;direct-link&quot; href=&quot;#references&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://sanctum.geek.nz/arabesque/series/gnu-linux-crypto/&quot;&gt;Series: GNU/Linux Crypto « Arabesque&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://alexcabal.com/creating-the-perfect-gpg-keypair/&quot;&gt;Creating the perfect GPG keypair&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://unix.stackexchange.com/questions/31996/how-are-the-gpg-usage-flags-defined-in-the-key-details-listing&quot;&gt;How are the GPG usage flags defined in the key details listing? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;
</content>
</entry>
<entry>
<title>Arch Linux, quick installation guide</title>
<link href="https://lafuente.me/posts/arch-linux-quick-installation-guide"/>
<updated>2014-03-28T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/arch-linux-quick-installation-guide</id>
<content type="html">&lt;h2 id=&quot;ipxe&quot;&gt;iPXE &lt;a class=&quot;direct-link&quot; href=&quot;#ipxe&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Install from a USB using &lt;a href=&quot;http://ipxe.org/&quot;&gt;iPXE&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Download image from &lt;a href=&quot;http://boot.ipxe.org/ipxe.iso&quot;&gt;http://boot.ipxe.org/ipxe.iso&lt;/a&gt; and copy to an USB stick.&lt;/p&gt; &lt;p&gt;Find your USB&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;lsblk&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Copy the image to the USB&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ipxe.iso &lt;span class=&quot;token assign-left variable&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/dev/sdX&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now boot with the USB&lt;/p&gt; &lt;h2 id=&quot;arch-linux-netboot&quot;&gt;Arch Linux Netboot &lt;a class=&quot;direct-link&quot; href=&quot;#arch-linux-netboot&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;Obtain an IP address&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dhcp&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Start Arch Linux boot, original link is &lt;a href=&quot;http://releng.archlinux.org/pxeboot/arch.ipxe&quot;&gt;http://releng.archlinux.org/pxeboot/arch.ipxe&lt;/a&gt;&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;chain http://bit.do/archipxe&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Get &lt;a href=&quot;https://github.com/helmuthdu/aui&quot;&gt;Arch Linux Ultimate Install Script&lt;/a&gt;&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; http://bit.do/archis&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; xzf archis&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;dir&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./ais&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Reboot and finish the installation. If network doesn&#x27;t work do&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;systemctl start dhcpcd&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Helper to finish the installation, original at &lt;a href=&quot;https://raw.githubusercontent.com/jlesquembre/arch_install_script/master/ais.sh&quot;&gt;https://raw.githubusercontent.com/jlesquembre/arch_install_script/master/ais.sh&lt;/a&gt;&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; http://bit.do/jlais&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Using the KDE Wallet to store ssh keys with passphrases</title>
<link href="https://lafuente.me/posts/using-the-kde-wallet-to-store-ssh-keys-with-passphrases"/>
<updated>2012-03-09T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/using-the-kde-wallet-to-store-ssh-keys-with-passphrases</id>
<content type="html">&lt;p&gt;I have read an article about SSH passphrases (&lt;a href=&quot;http://help.github.com/ssh-key-passphrases/&quot;&gt;github:help&lt;/a&gt;), but they only explain how to use ssh-agent with msysgit and Mac OSX, no word about Linux.&lt;/p&gt; &lt;p&gt;This guide is about how to use KDE Wallet with ssh-agent. This way, we can use SSH keys with passphrases, but we don&#x27;t need to enter a passphrase every time we use the key, KDE Wallet does the job. I assume you are using KDE.&lt;/p&gt; &lt;p&gt;In 3 easy steps:&lt;/p&gt; &lt;h3 id=&quot;1.-install-ksshaskpass&quot;&gt;1. Install ksshaskpass &lt;a class=&quot;direct-link&quot; href=&quot;#1.-install-ksshaskpass&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Use your favorite package manager.&lt;/p&gt; &lt;h3 id=&quot;2.-create-script-file&quot;&gt;2. Create script file &lt;a class=&quot;direct-link&quot; href=&quot;#2.-create-script-file&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Create the file&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;~/.kde/Autostart/ssh-add.sh&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On some distributions &lt;code&gt;~/.kde4/Autostart/ssh-add.sh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;And add this content&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;SSH_ASKPASS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/bin/ksshaskpass&lt;br&gt;ssh-add &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; /dev/null&lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;3.-make-it-executable&quot;&gt;3. Make it executable &lt;a class=&quot;direct-link&quot; href=&quot;#3.-make-it-executable&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x ~/.kde/Autostart/ssh-add.sh&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And run the script (or restart the session)&lt;/p&gt; &lt;h3 id=&quot;extra&quot;&gt;Extra &lt;a class=&quot;direct-link&quot; href=&quot;#extra&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;For security reasons, is a good idea stop ssh-agent when you finish your session, create the file&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;~/.kde/shutdown/ssh-agent.sh&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With this content&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;ssh-agent -k&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This file should be executable&lt;/p&gt; &lt;p&gt;A good page for more info about SSH: &lt;a href=&quot;https://wiki.archlinux.org/index.php/Secure_Shell&quot;&gt;Secure Shell (Arch Linux)&lt;/a&gt;&lt;/p&gt;
</content>
</entry>
<entry>
<title>Autofs configuration</title>
<link href="https://lafuente.me/posts/autofs-configuration"/>
<updated>2011-03-11T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/autofs-configuration</id>
<content type="html">&lt;p&gt;Autofs uses &lt;code&gt;/etc/autofs/auto.master&lt;/code&gt; as its default primary configuration file. We can define two kind of maps in this file, direct and indirect. An example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# mount point config file options /- /etc/autofs/auto.direct --ghost /media/cifs /etc/autofs/auto.cifs --timeout=60 --ghost /media/sshfs /etc/autofs/auto.sshfs --timeout=60 --ghost +auto.master &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;First map is a direct map, the other two are indirect. Entries in a direct map contain an absolute path, instead of the relative path names used in indirect maps. The &lt;code&gt;--ghost&lt;/code&gt; option tells the automounter to create empty directories of all the mount points. The &lt;code&gt;/media&lt;/code&gt; folder should be empty. Let&#x27;s see the other configuration files, in this example we are going to mount a remote file system using cifs and ssh.&lt;/p&gt; &lt;p&gt;&lt;code&gt;/etc/autofs/auto.direct&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# directory mount options device to mount /home/ian/music -fstype=cifs,ro,soft,user=guest ://192.168.1.10/music /home/deb/music -fstype=cifs,ro,soft,user=guest ://192.168.1.10/music &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Folders &lt;code&gt;/home/ian/music&lt;/code&gt; and &lt;code&gt;/home/deb/music&lt;/code&gt; should be empty or not exist. In both we can access to te remote folder /music in computer 192.168.1.10&lt;/p&gt; &lt;p&gt;&lt;code&gt;/etc/autofs/auto.cifs&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# directory mount options device to mount ian -fstype=cifs,ro,soft,user=ian ://192.168.1.10/export/home/ian deb -fstype=cifs,ro,soft,user=deb ://192.168.1.10/export/home/deb &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Folders &lt;code&gt;/media/cifs/ian&lt;/code&gt; and &lt;code&gt;/media/cifs/deb&lt;/code&gt; will be created.&lt;/p&gt; &lt;p&gt;&lt;code&gt;/etc/autofs/auto.sshfs&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# directory mount options device to mount ian_ssh -fstype=fuse,rw,allow_other,IdentityFile=/path/to/ssh_key :sshfs\#user@192.168.1.10\:/mnt/folder/ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Folder &lt;code&gt;/media/sshfs/ain_ssh&lt;/code&gt; will be created.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Using public keys with openSSH</title>
<link href="https://lafuente.me/posts/using-public-keys-with-openssh"/>
<updated>2011-01-27T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/using-public-keys-with-openssh</id>
<content type="html">&lt;p&gt;&lt;img src=&quot;/images/sshconnection.png&quot; alt=&quot;ssh connection diagram&quot;&gt;&lt;/p&gt; &lt;h3 id=&quot;generate-the-key&quot;&gt;Generate the key &lt;a class=&quot;direct-link&quot; href=&quot;#generate-the-key&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;We need to create a public key, we do it in computer A:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;token number&quot;&gt;2048&lt;/span&gt; -f /home/user_name/.ssh/key-name&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Press always intro when asked to generate a key without passphrase. This is less secure, but it can be really useful. Now we have in our .ssh folder the keys (key-name and key-name.pub)&lt;/p&gt; &lt;h3 id=&quot;copy-public-key&quot;&gt;Copy public key &lt;a class=&quot;direct-link&quot; href=&quot;#copy-public-key&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Copy the public key to the remote host you wish to access (in our example from computer A to B) and add it to the file&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/.ssh/authorized_keys &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If that file does not exist then you should create it. Or you can use ssh-copy-id to log into a remote machine and append the indicated identity file to that machine&#x27;s ~/.ssh/authorized_keys file.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ssh-copy-id [-i [identity_file]] [user@]machine &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;test-it&quot;&gt;Test it &lt;a class=&quot;direct-link&quot; href=&quot;#test-it&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;In computer A run this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt; -i key user@computerB_IP&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If every thing is fine, you should be able to connect to computer B with this command.&lt;/p&gt; &lt;h3 id=&quot;laziness-is-a-virtue%2C-using-ssh-config&quot;&gt;Laziness is a virtue, using ssh config &lt;a class=&quot;direct-link&quot; href=&quot;#laziness-is-a-virtue%2C-using-ssh-config&quot;&gt;#&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;You can create alias for your ssh connections, this way, you don&#x27;t need to remember usernames, IPs, etc...&lt;/p&gt; &lt;p&gt;First, create this file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;~/.ssh/config &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;with this content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Host alias HostName computerB_IP User username IdentityFile ~/.ssh/path/to/key &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now it is possible connent with this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Great, isn&#x27;t it? For a complete connect list for the ssh config file, type&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;man&lt;/span&gt; ssh_config&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>File and directory permissions</title>
<link href="https://lafuente.me/posts/file-and-directory-permissions"/>
<updated>2011-01-24T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/file-and-directory-permissions</id>
<content type="html">&lt;p&gt;The best way to understand the Linux permissions, is with an example. If we run the command &lt;code&gt;ls -l&lt;/code&gt; we get an output like this:&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1 2 3 4 5 6 7 8&lt;br&gt;- rw-r----- 1 user users 8 ene 24 11:01 f.txt&lt;br&gt;d rwxr-xr-x 2 root root 4096 ene 24 12:14 dir&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which maps to&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1 2 3 4 5 6 7 8&lt;br&gt;d uuugggooo links owner group size date name&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Numbers from 1 to 8 are not really in the output, but are here to clarify every field.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;First character specifies the type of the file. In the example above the hyphen (&lt;code&gt;-&lt;/code&gt;) in the first character indicates that this is a normal file, and the &lt;code&gt;d&lt;/code&gt; indicates that this other file is a directory. &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_file_types&quot;&gt;List with all file types&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Next 9 characters specifies the files permission. Each 3 characters refers to the read, write and execute permissions for user, group and others. In this example, &lt;code&gt;rw-r-----&lt;/code&gt; indicates read-write permission for user, read permission for group, and no permission for others.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Number of &lt;a href=&quot;http://en.wikipedia.org/wiki/Hard_link&quot;&gt;links&lt;/a&gt;, in this case is 1 for the file &lt;code&gt;f.txt&lt;/code&gt; and 2 for the directory &lt;code&gt;dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Owner, in this example, user for the file, and root for the directory.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Group, in this example, users for the file, and root for the directory.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Size of the file.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Last modified time.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;File name.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Difference in access permission between files and folders are:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;File&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;Folder&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;Read&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;File contents can be read&lt;/td&gt; &lt;td&gt;Directory listing can be obtained&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;Write&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;File contents can be changed&lt;/td&gt; &lt;td&gt;Directory content can be changed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;strong&gt;Execute&lt;/strong&gt;&lt;/td&gt; &lt;td&gt;File can be executed&lt;/td&gt; &lt;td&gt;Directory can be accessed&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Remember, give execute permission to a folder if you want to access it.&lt;/p&gt; &lt;p&gt;Instead of use the values &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, you can use numeric values, where&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;r = 4&lt;br&gt;w = 2&lt;br&gt;x = 1&lt;br&gt;- = 0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is possible combine this values, a table with all the possibilities:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Value&lt;/th&gt; &lt;th&gt;Text equivalent&lt;/th&gt; &lt;th&gt;Meaning&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;---&lt;/td&gt; &lt;td&gt;All types of access are denied&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;--x&lt;/td&gt; &lt;td&gt;Execute access is allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;-w-&lt;/td&gt; &lt;td&gt;Write access is allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;-wx&lt;/td&gt; &lt;td&gt;Write and execute access are allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;r--&lt;/td&gt; &lt;td&gt;Read access is allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;r-x&lt;/td&gt; &lt;td&gt;Read and execute access are allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;rw-&lt;/td&gt; &lt;td&gt;Read and write access are allowed&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;rwx&lt;/td&gt; &lt;td&gt;Everything is allowed&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;To change the permissions you can use the command &lt;code&gt;chmod&lt;/code&gt;, which has this syntax:&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;chmod [options] MODE FILE&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#x27;s see some examples, to give read and write access to everyone, you can use this two equivalent commands:&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;chmod a=rw file.txt&lt;br&gt;chmod 666 file.txt&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To give read and write access to user and group, but no access to others, you can use this two equivalent commands:&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;chmod u=rw,g=rw,o= file.txt&lt;br&gt;chmod 660 file.txt&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to change the access permissions of a folder recursively never use the -R option. Chmod doesn&#x27;t differentiate between folders and files, and this is really important, because execution access has different meanings for files and folders. Instead use this:&lt;/p&gt; &lt;p&gt;For directories:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -type d -exec &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;755&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For files:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; -type f -exec &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;644&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To finish, if you want to change the file owner, you can use the command chown, with this syntax:&lt;/p&gt; &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;chown [options] OWNER[:GROUP] file.txt&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; user1 file.txt&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To change the owner recursively, use the option -R If you just want to change the group, use the command chgrp.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Load a kernel module</title>
<link href="https://lafuente.me/posts/load-a-kernel-module"/>
<updated>2011-01-22T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/load-a-kernel-module</id>
<content type="html">&lt;p&gt;In Linux, to load a kernel module (for example, fuse) run:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;modprobe fuse&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can verify that the module is loaded using the following command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;dmesg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -i fuse&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want it to to load a module, add that module to &lt;code&gt;/etc/modules&lt;/code&gt;, an example file:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /etc/modules: kernel modules to load at boot time.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# This file contains the names of kernel modules that should be loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# at boot time, one per line. Lines beginning with &quot;#&quot; are ignored.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Parameters can be specified after the module name.&lt;/span&gt;&lt;br&gt;&lt;br&gt;fuse&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And if you want to cofigure some options for that kernel module do it in the folder &lt;code&gt;/etc/modules&lt;/code&gt;, in our example put the options in the file &lt;code&gt;/etc/modules/fuse&lt;/code&gt;&lt;/p&gt;
</content>
</entry>
<entry>
<title>OpenSSH, remote host identification has changed</title>
<link href="https://lafuente.me/posts/remote-host-authentication-changed"/>
<updated>2011-01-19T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/remote-host-authentication-changed</id>
<content type="html">&lt;p&gt;Sometimes when I run the ssh command I get this error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that the RSA host key has just been changed. The fingerprint for the RSA key sent by the remote host is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending key in /home/user/.ssh/known_hosts:7 RSA host key for 192.168.1.5 has changed and you have requested strict checking. Host key verification failed. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This usually happens when I change any machine in my network. The best way to solve this problem is removing all keys belonging to hostname from &lt;code&gt;known_hosts&lt;/code&gt; file. In my case, the remote host is &lt;code&gt;192.168.1.5&lt;/code&gt;, so I run the command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen -R &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.1.5&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And now I can access again to the remote host.&lt;/p&gt; &lt;p&gt;An alternative is to set &lt;code&gt;StrictHostKeyChecking&lt;/code&gt; to &lt;code&gt;no&lt;/code&gt; in your ssh_config. For a better description, take a look to the end of this article: &lt;a href=&quot;http://blogs.atlassian.com/2011/05/advanced_ssh_for_developers/&quot;&gt;Three helpful SSH tips for developers&lt;/a&gt;&lt;/p&gt;
</content>
</entry>
<entry>
<title>Give sudo access to any user</title>
<link href="https://lafuente.me/posts/give-sudo-access-to-any-user"/>
<updated>2011-01-18T00:00:00-00:00</updated>
<id>https://lafuente.me/posts/give-sudo-access-to-any-user</id>
<content type="html">&lt;p&gt;Normally, after install the OS (Debian in my case), you don&#x27;t have sudo access, and you can see this error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;user is not in the sudoers file. This incident will be reported. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To solve it, first log in as root, to do it enter:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;su&lt;/span&gt; root&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, as super user, you can run this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;visudo&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With this command we open the sudo configuration file, add at the end this line:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;user ALL=(ALL) ALL &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace &lt;code&gt;user&lt;/code&gt; with your user name and save the file. Don&#x27;t forget exit from the super user account, simply enter:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;tip%3A&quot;&gt;Tip: &lt;a class=&quot;direct-link&quot; href=&quot;#tip%3A&quot;&gt;#&lt;/a&gt;&lt;/h2&gt; &lt;p&gt;If you use Debian, and want to change the default text editor for the system, enter this command:&lt;/p&gt; &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; update-alternatives --config editor&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A list with all text editor will appear and you can select your favourite.&lt;/p&gt; &lt;p&gt;If you want to know where the sudo incident are reported, &lt;a href=&quot;http://xkcd.com/&quot;&gt;xkcd&lt;/a&gt; offers you an explanation:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/incident.png&quot; alt=&quot;incident xkcd 838&quot;&gt;&lt;/p&gt;
</content>
</entry>
</feed>